<?xml version="1.0" encoding="UTF-8"?>
<Configuration name="taskflow" status="warn" monitorInterval="60">
	<Properties>
		<!-- <Property name= "LOG_HOME" value= "/Users/bailey/Data/logs/taskflow"/>  -->
		<Property name= "LOG_HOME" value= "${sys:log.home:-/Users/bailey/Data/logs/taskflow}"/>
		<Property name= "FILE_PATTERN_SUFFIX" value= "%d{yyyy-MM-dd}-%i.log.gz"/>
		<Property name= "CONSOLE_PATTERN_SUFFIX" value= "%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
		<Property name= "FILE_PATTERN_LAYOUT" value= "%d{yyyy-MM-dd HH:mm:ss.SSS} %5p [%t] %-40.40c{1.} : %m%n"/>
		<property name="CHARSET">UTF-8</property>
		<property name="MAX_FILE_SIZE" value="1 GB" />
		<!-- 日志文件最多个数 -->
		<property name="ROLLOVER_STRATEGY" value="20" />
		<!-- 日志历史 -->
		<property name="FILE_HISTORY" value="1D" />
		
	</Properties>

<!-- http://logging.apache.org/log4j/2.x/manual/appenders.html -->
  <Appenders>
  	<!-- target : SYSTEM_ERR or SYSTEM_OUT -->
    <Console name="Console" target="SYSTEM_OUT" ignoreExceptions="false">
      <PatternLayout pattern="${CONSOLE_PATTERN_SUFFIX}"/>
    </Console>
	<File name="File" fileName="${LOG_HOME}/file.log" ignoreExceptions="false">
      <PatternLayout>
        <Pattern>%d %p %c{1.} [%t] %m%n</Pattern>
      </PatternLayout>
    </File>
    
	<RollingFile name= "SUB_File" fileName= "${LOG_HOME}/x/demo/sub_app.log" filePattern= "${LOG_HOME}/x/demo/$${date:yyyy-MM}/sub_app-${FILE_PATTERN_SUFFIX}">
		<Filters>
			<ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/>  
		</Filters>
		<PatternLayout pattern= "${FILE_PATTERN_LAYOUT}" charset="${CHARSET}"/>
		<Policies>
			<!-- TimeBasedTriggeringPolicy :时间滚动策略,默认0点小时产生新的文件,interval="1" : 自定义文件滚动时间间隔,每隔1小时产生新文件, modulate="true" : 产生文件是否以0点偏移时间,即6点,12点,18点,0点-->
			<TimeBasedTriggeringPolicy modulate="true" interval="1" />
			<SizeBasedTriggeringPolicy size= "${MAX_FILE_SIZE}"/>
		</Policies>
		<!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件 -->
		<DefaultRolloverStrategy max="${ROLLOVER_STRATEGY}">
			<Delete basePath="${LOG_HOME}" maxDepth="3">
				<IfFileName glob="*/app-*.log.gz"/>
				<IfLastModified age="${FILE_HISTORY}"/>
			</Delete>
		</DefaultRolloverStrategy>
	</RollingFile>
	<!-- 与标准RollingFileAppender相似，除了它总是被缓存并且在内部它使用ByteBuffer + RandomAccessFile而不是BufferedOutputStream。
	与RollingFileAppender相比，性能提高了20-200％。 -->
	<RollingRandomAccessFile name= "ROOT_File" fileName= "${LOG_HOME}/x/app.log" filePattern= "${LOG_HOME}/x/$${date:yyyy-MM}/app-${FILE_PATTERN_SUFFIX}"
	immediateFlush="true">
		<Filters>
			<ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/>  
		</Filters>
		<!-- 256 * 1024Bytes；异步下无效 -->
		<bufferSize>262144</bufferSize>
		<PatternLayout pattern= "${FILE_PATTERN_LAYOUT}"/>
		<Policies>
			<TimeBasedTriggeringPolicy modulate="true" interval="1" />
			<SizeBasedTriggeringPolicy size= "${MAX_FILE_SIZE}"/>
		</Policies>
		<DefaultRolloverStrategy max="${ROLLOVER_STRATEGY}">
            <Delete basePath="${LOG_HOME}" maxDepth="3">
				<IfFileName glob="*/app-*.log.gz"/>
				<IfLastModified age="${FILE_HISTORY}"/>
			</Delete>
        </DefaultRolloverStrategy>
	</RollingRandomAccessFile>
	
	<!-- 写入这些Appender时的异常将从应用程序中隐藏 -->
	<Async name="AsyncConsole">
      <AppenderRef ref="Console"/>
      <!-- If false, the event will be written to the error appender if the queue is full -->
      <blocking>true</blocking>
      <!-- Specifies the maximum number of events that can be queued -->
      <bufferSize>1024</bufferSize>
      <!-- 日志携带类名，行号等信息(提取信息将慢5 - 20 times) -->
      <includeLocation>false</includeLocation>
      <!-- ArrayBlockingQueue,DisruptorBlockingQueue(特有属性spinPolicy),JCToolsBlockingQueue,LinkedTransferQueue(不支持bufferSize ) -->
      <!-- 阻塞队列很容易发生锁争用，当更多线程同时记录时，性能可能会变差；应使用无锁异步记录器DisruptorBlockingQueue提高性能 -->
      <DisruptorBlockingQueue/>
      <!-- The name of the Appender to invoke if none of the appenders can be called, either due to errors in the appenders or because the queue is full. If not specified then errors will be ignored. -->
      <!-- <errorRef ref="File"/> -->
      <!-- 追加日志时发生异常将被忽略；false异常将传播到调用方. -->
      <ignoreExceptions>true</ignoreExceptions>
    </Async>
	<Async name="AsyncFile">
      <AppenderRef ref="File"/>
    </Async>
    
    <!-- 包装一组Appender，若主Appender失败则依次尝试次要Appender -->
    <!-- Appender的ignoreExceptions属性必须为false -->
	<Failover name="Failover_File" primary="File">
      <Failovers>
        <AppenderRef ref="Console"/>
      </Failovers>
    </Failover>
  </Appenders>
  
  <Loggers>
	<!--过滤掉spring和mybatis的DEBUG信息 -->
    <logger name="org.springframework" level="INFO"/>
    <logger name="org.mybatis" level="INFO"/>
  
  	<!-- 混合模式 -->
    <Logger name="ASYN_STD" level="debug" additivity="false">
    	<AppenderRef ref="AsyncConsole"/>
    	<AppenderRef ref="File"/>
    </Logger>
    <Logger name="x" level="debug" additivity="false">
    	<AppenderRef ref="ROOT_File"/>
    </Logger>
	<!--LOG4J有三种日志模式,全异步日志,混合模式,同步日志,性能从高到底,线程越多效率越高,也可以避免日志卡死线程情况发生-->
	<!-- 开启全异步日志: -Dlog4j2.contextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector -->
	<!-- 或在classpath下配置文件log4j2.component.properties里加上 -->
	<!-- 全异步日志下会自动批量flush，所以Appender的immediateFlush=false(该参数仅同步下有效) -->
	<AsyncLogger name="x.demo" level="info" includeLocation="true" additivity="false">
		<Appender-ref ref="SUB_File"/>
		<AppenderRef ref="AsyncConsole"/>
	</AsyncLogger>
    
    <!-- 混合模式最好Root同步其它异步 -->
    <Root level="INFO">
        <AppenderRef ref="Console"/>
    </Root>
  </Loggers>
</Configuration>